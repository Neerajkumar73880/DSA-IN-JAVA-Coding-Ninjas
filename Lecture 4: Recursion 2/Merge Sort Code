Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 

















*****************************************************************************************************************************************














public class solution {
    private static void merge(int[] arr,int low,int high){
        int mid = (low + high)/2;
        int []brr = new int[high-low+1];
        int i =low;
        int j = mid+1;
        int k = 0;
        while(i<=mid && j<=high){
            if(arr[i]<arr[j]){
                brr[k]=arr[i];
                k++;
                i++;
            }
            else{
                brr[k]=arr[j];
                k++;
                j++;
                
            }
        }
        while(i<=mid){
            brr[k]=arr[i];
            k++;
            i++;
        }
        while(j<=high){
            brr[k]=arr[j];
            k++;
            j++;
        }
        
        for(int m = 0; m<brr.length; m++){
            arr[low + m]=brr[m];
        }
    }
    
    public static void mergeSor(int[] arr, int low, int high){
        if(low>=high){
            return ;
        }
        int mid = (high + low)/2;
        mergeSor(arr,low,mid);  //1
        mergeSor(arr,mid+1,high);  //2
        merge(arr,low,high);  //3
    }
    
	public static void mergeSort(int[] input){
		// Write your code here
        int low = 0;
        int high = input.length-1;
        mergeSor(input,low,high);
		
	}
}
